# -*- coding: utf-8 -*-
"""
Created on Mon Oct  4 01:08:03 2021

@author: angel
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Read the file
v, v_err, c, c_err = np.loadtxt(r"C:\Users\angel\Desktop\Docs\PHY244\PowerLawOhmLawLab\lightbulbData1.csv", 
                                                              delimiter = ",", unpack = True)

#truncate all the points
c = c[3:]
v = v[3:]
c_err = c_err[3:]
v_err = v_err[3:]

c_amps = c/1000
c_err_amps = c_err/1000
# Make the errorbar plot for data points
plt.errorbar(v, c_amps, yerr = c_err_amps, xerr = v_err, marker = "o", ls = "none", label = "Data")
plt.title("Current Over Voltage (Non-Linear Power Law Relationship)")
plt.xlabel("Voltage (V)")
plt.ylabel("Current(Amps)")


# Model function
def calcCurrentNonLinear(voltage, a, b): 
    # given a voltage, return current given power law (non linear)
    return a*(voltage**b)


# Fit the data with a best-fit curve 
# I made two curves, the first curve does not take sigma values into account
# the second curve takes the sigma values into account
# popt1, pcov1 = curve_fit(calcCurrentNonLinear, xdata = v, ydata = c_amps,
#                         absolute_sigma = True, sigma= c_err_amps)

popt1, pcov1 = curve_fit(calcCurrentNonLinear, xdata = v, ydata = c_amps,
                         absolute_sigma = True, sigma= c_err_amps)


print("The covariance of curvefit 1 is", pcov1)
pstd1 = np.sqrt(np.diag(pcov1))
print("The standard deviation of the model data is", pstd1, "\n")

"""

popt2, pcov2 = curve_fit(calcCurrentNonLinear, xdata = v, ydata = c_amps,
                         absolute_sigma = True, sigma= c_err_amps, bounds=[(min(v), min(c)),(max(v), max(c))])

print("The covariance of curvefit 2 is", pcov2)
print("The model function of curvefit 2 is: ", popt2[0], "*v^", popt2[1], "\n")

"""

model_current_data1 = []
#model_current_data2 = []
for i in range(0, len(v)):
        model_current_data1.append(calcCurrentNonLinear(v[i], popt1[0], popt1[1]))
        #model_current_data2.append(calcCurrentNonLinear(v[i], popt2[0], popt2[1]))
        
# for debugging purposes
"""
print(c_amps)
print(model_current_data1)
"""

def redChiSquared(measured_data, predicted_data, err):
    # returns chiSquared value
    # takes in arrays of measured_data, predicted_data, and err
    # assume the arrays have the same length
    sum = 0
    for x in range(0, len(measured_data)):
        sum += ((measured_data[x]) - (predicted_data[x]))**2 / (err[x])**2
        #sum += ((measured_data[x]) - (predicted_data[x]))**2 / (predicted_data[x])**2
    return sum /(len(measured_data) - 2)

print ("The reduced chi squared of Curve Fit 1 is", redChiSquared(c_amps, model_current_data1, c_err_amps))
#print ("The reduced chi squared of Curve Fit 2 is", redChiSquared(c_amps, model_current_data2, c_err_amps))


curveFitLabel = "current =" + str(round(popt1[0],3)) + "*voltage^" +str(round(popt1[1],3))
plt.plot(v, model_current_data1, label = curveFitLabel)
#plt.plot(v, model_current_data2, label = "Curve Fit 2")
plt.legend()
